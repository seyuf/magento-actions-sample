
name: m2-actions-test

on: [push]

jobs:
  magento2-build:
    runs-on: ubuntu-latest
    name: 'm2 tests & build'
    services:
      mysql:
        image: docker://mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      elasticsearch:
        image: docker://elasticsearch:7.17.0
        ports:
          - 9200:9200
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
    steps:
    - uses: actions/checkout@v3  
            
    - name: 'install fresh magento repo'
      #if: ${{false}}
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'create-project'
        magento_version: 2.4.6
        no_push: 0   ## add this arg to not push to the repo ideal for quick test on specific version
        
        
    - name: 'install fresh pwa-studio project'
      #if: ${{false}}
      uses: MAD-I-T/magento-actions@master
      with:
        process: 'pwa-studio-install'
        no_push: 0
    
    - name: 'launch magento2 unit test'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'unit-test'
        elasticsearch: 1

    - name: 'launch magento2 unit test filtered by testsuite'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'unit-test'
        testsuite: 'Magento_Unit_Tests_Other'
        elasticsearch: 1

        
    - name: 'launch magento2 unit test specific module i.e module-email'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'unit-test'
        elasticsearch: 1
        unit_test_subset_path: 'vendor/magento/module-email/Test/Unit'


    - name: 'launch magento2 static test'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'static-test'
        elasticsearch: 1
        
        
    - name: 'magento coding standard checker'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'phpcs-test'
        extension: 'magento/vendor/magento/module-email' # can be a custom value module in app/code/ dir e.g: Madit/Atos 
        severity: 10
        standard: 'Magento2'
        
        
    - name: 'launch magento2 build'
      if: always()
      id: build
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'build'
        elasticsearch: 1
        
        
    - name: 'launch security scanner files'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'security-scan-files'
        elasticsearch: 1
        
        
    - name: 'launch security scanner modules'
      if: always()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'security-scan-modules'
        elasticsearch: 1

    - name: 'mess detector'
      if: always()
      uses: MAD-I-T/magento-actions@v3.19
      with:
        process: 'mess-detector'
        md_src_path: 'vendor/magento/module-email'

    - name: 'phpstan'
      if: always()
      uses: MAD-I-T/magento-actions@v3.19
      with:
        process: 'phpstan'
        exec_path: 'vendor/magento/module-email'


   #### section to be activated, for zero downtime deployment on preprod and/or prod remove ${{false}}
    - name: 'launch magento2 zero downtime deploy with no permission check'
      if: ${{false}} #  if: steps.build.outcome == 'success'
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
        MYSQL_ROOT_PASSWORD: magento
        MYSQL_DATABASE: magento
        HOST_DEPLOY_PATH: ${{secrets.STAGE_HOST_DEPLOY_PATH}}
        HOST_DEPLOY_PATH_BUCKET: ${{secrets.STAGE_HOST_DEPLOY_PATH}}/bucket
        SSH_PRIVATE_KEY: ${{secrets.STAGE_SSH_PRIVATE_KEY}}
        SSH_CONFIG: ${{secrets.STAGE_SSH_CONFIG}}
        WRITE_USE_SUDO: false
      with:
        deployer: 'no-permission-check'
        process: 'deploy-staging'
        
    - name: 'unlock deployer if fails'
      if: ${{false}} # if: failure() || cancelled()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
        MYSQL_ROOT_PASSWORD: magento
        MYSQL_DATABASE: magento
        HOST_DEPLOY_PATH: ${{secrets.STAGE_HOST_DEPLOY_PATH}}
        HOST_DEPLOY_PATH_BUCKET: ${{secrets.STAGE_HOST_DEPLOY_PATH}}/bucket
        SSH_PRIVATE_KEY: ${{secrets.STAGE_SSH_PRIVATE_KEY}}
        SSH_CONFIG: ${{secrets.STAGE_SSH_CONFIG}}
        WRITE_USE_SUDO: false
      with:
        process: 'cleanup-staging'
        
        
    - name: 'start zero downtime deploy on production'
      if: ${{false}} # if: steps.build.outcome == 'success'
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
        MYSQL_ROOT_PASSWORD: magento
        MYSQL_DATABASE: magento
        HOST_DEPLOY_PATH: ${{secrets.PROD_HOST_DEPLOY_PATH}}
        HOST_DEPLOY_PATH_BUCKET: ${{secrets.PROD_HOST_DEPLOY_PATH}}/bucket
        SSH_PRIVATE_KEY: ${{secrets.PROD_SSH_PRIVATE_KEY}}
        SSH_CONFIG: ${{secrets.PROD_SSH_CONFIG}}
        WRITE_USE_SUDO: false
      with:
        process: 'deploy-prod'
        deployer: 'no-permission-check'        
        
    - name: 'unlock php deployer if the deployment fails on production'
      if: ${{false}} #if: failure() || cancelled()
      uses: MAD-I-T/magento-actions@master
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
        MYSQL_ROOT_PASSWORD: magento
        MYSQL_DATABASE: magento
        HOST_DEPLOY_PATH: ${{secrets.PROD_HOST_DEPLOY_PATH}}
        HOST_DEPLOY_PATH_BUCKET: ${{secrets.PROD_HOST_DEPLOY_PATH}}/bucket
        SSH_PRIVATE_KEY: ${{secrets.PROD_SSH_PRIVATE_KEY}}
        SSH_CONFIG: ${{secrets.PROD_SSH_CONFIG}}
        WRITE_USE_SUDO: false
      with:
        process: 'cleanup-prod'


  magento2-integration-test:
    runs-on: ubuntu-latest
    name: 'm2 integration test'
    services:
      mysql:
        image: docker://mysql:8
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5 -e MYSQL_ROOT_PASSWORD=magento -e MYSQL_USER=magento -e MYSQL_PASSWORD=magento -e MYSQL_DATABASE=magento --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
      elasticsearch:
        image: docker://elasticsearch:7.17.0
        ports:
          - 9200:9200
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
      rabbitmq:
        image: docker://rabbitmq:3.9-alpine
        env:
          RABBITMQ_DEFAULT_USER: "magento"
          RABBITMQ_DEFAULT_PASS: "magento"
          RABBITMQ_DEFAULT_VHOST: "/"
        ports:
          - 5672:5672

    steps:
      - uses: actions/checkout@v3  
      - name: 'install fresh magento repo'
        #if: always()
        if: ${{true}}
        uses: MAD-I-T/magento-actions@v3.18
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'create-project'
          magento_version: 2.4.5
          no_push: 1

      - name: 'launch magento2 integration test custom testsuite'
        if: ${{true}}
        uses: MAD-I-T/magento-actions@v3.18
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'integration-test'
          elasticsearch: 1
          testsuite: "Memory Usage Tests"
      
      - name: 'integration test class'
        if: ${{true}}
        uses: MAD-I-T/magento-actions@v3.18
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'integration-test'
          elasticsearch: 1
          integration_class: "./testsuite/Magento/MemoryUsageTest.php"

      - name: 'integration test class filter'
        if: ${{true}}
        uses: MAD-I-T/magento-actions@v3.18
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'integration-test'
          elasticsearch: 1
          integration_class: "./testsuite/Magento/MemoryUsageTest.php"
          integration_filter: "testAppReinitializationNoMemoryLeak"

          

  
